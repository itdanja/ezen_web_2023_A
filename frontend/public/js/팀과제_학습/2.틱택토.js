//alert('1.js실행')
// 2. 함수 호출 : 
	// 1. js : 함수명()
	// 2. html : <마크업 이벤트속성="함수명()" />
//클릭이벤트()

// 4.배열선언 [ 버튼의 알 상태를 저장하는 배열 -> null : 빈자리 ]
let 버튼목록현황 = [ null , null , null , null , null , null ,null , null , null ]
// 1.사용자 버튼 클릭했을떄 실행되는 함수 / 1. 함수 정의/만들기
function 클릭이벤트( 버튼번호 ){ // f s 
	// 1. 선택된 번호와 알모양을 알두기 함수 전달하고 반환이 false이면 알두기 실패 / true 성공 후 컴퓨터 차례
		//  ! : 반대/부정 false->true   / true->false
	if( ! 알두기( 버튼번호 , 'O' ) ) { return; }
	// * 알두기 성공시 결과체크 / 승리자,무승부 있을경우[true] 게임종료
	
	
	// 2. 컴퓨터 차례  무한루프 [ 정상적으로 알 두기 전까지 ]
	while( true ){ // w s 
		let 컴퓨터번호 = parseInt( Math.random()*9 )+1 // 1~9 사이의 난수 생성
		if( 알두기( 컴퓨터번호 , 'X' ) ) {  }
	} // w e 
	
} // f e 
// 2. 알두기 [ 반환값 : 알 정상적으로 두었는지 확인 false:0:'실패'  / true:1:'성공' -> 신호 번호 ]
function 알두기( 버튼번호 , 알모양 ){
	// 1. <div> 버튼 목록 가져와서 배열에 저장 [ div 9개 호출 ]
	let 버튼목록 = document.querySelectorAll('.버튼');	
	// 2.배열에 상태 변경  // * 만약에 빈자리 가 아니면 실패 false 반환 
	if( 버튼목록현황[버튼번호-1] !=  null ){ return false; }
	// 3. 알모양과 상태 변경 // 클릭된 번호의 div 찾기 [ 선택번호-1 ] // -1 : 인덱스 0부터 시작하니까
	버튼목록[버튼번호-1].innerHTML = 알모양 ; // html 알 상태 변경
	버튼목록현황[버튼번호-1] = 알모양;  // js 알 상태 변경
	// 4. 성공 true 반환
	if( 결과() ) { return; }
	return true; // 성공했으면 true 반환
} // f e
// 3. 결과 함수 [ 사람/컴퓨터 알두기성공했을때 1.승리 2.패배 2.무승부[빈자리없으면] ]
function 결과(){ 
	// 1. 가로 승리자 판단 
		// * 배열의 초기값이 모두 null 이기 때문에 null 제외
	for( let i = 0 ; i<=6 ; i+=3 ){ // i는 0부터 6까지 3씩증가 반복처리 -> 3회반복 : 0 3 6 
		if( 버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+1] && 버튼목록현황[i+1] == 버튼목록현황[i+2]  ){
			결과출력(  버튼목록현황[i] ) // 버튼목록현황[i] : 승리자의 알모양[]
			return true; // * 승리자 존재 하는 신호;
		} // if e 
	} // for e
	
	// 2. 세로 승리자 판단 
	for( let i = 0 ; i<=2 ; i++ ){ // i는 0부터 2까지 1씩증가 반복처리 -> 3회반복 : 0 1 2 
		if( 버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+3] && 버튼목록현황[i+3] == 버튼목록현황[i+6] ){
			결과출력(  버튼목록현황[i] )
			return true; // * 승리자 존재 하는 신호;
		}
	} // for e
	
	// 3. 대각선 승리자 판단 [ 2개 ]
	if( 버튼목록현황[0] != null && 버튼목록현황[0] == 버튼목록현황[4] && 버튼목록현황[4] == 버튼목록현황[8] ){
		결과출력(  버튼목록현황[0] )
		return true ; // * 승리자 존재 하는 신호;
	}
	if( 버튼목록현황[2] != null && 버튼목록현황[2] == 버튼목록현황[4] && 버튼목록현황[4] == 버튼목록현황[6]){
		결과출력(  버튼목록현황[2] )
		return true ; // * 승리자 존재 하는 신호;
	}
	
	// 4. 무승부 판단
	let 빈자리수 = 0; 
	for( 버튼 of 버튼목록현황 ){
		if( 버튼 == null ){ 빈자리수++; }
	} // for end 
		// * 배열의 반복문이 모두 종료 되었을때 null 하나도 존재하지 않으면
	if( 빈자리수 == 0 ){ 결과출력('-'); return true; }
	
	return false; // 아직 승리/무승부 아닐경우
} // f e 

// 4. 게임 승리자 출력 
function 결과출력( 알모양 ){

	if( 알모양 == '-' ){ // 만약에 알 모양이 '-' 무승부 
		alert('무승부 [ 게임이 재시작 됩니다.] ')
	}else{ // 만약에 알 모양이 '-'  아니면 승리자 알 'O' or 'X'
		alert( ` ${알모양} 이 승리 했습니다. [ 게임이 재시작 됩니다.] `)
	}
	게임판출력();
}
게임판출력();
// 5. 게임판 출력 
function 게임판출력(){
	버튼목록현황 = [ null , null , null , null , null , null ,null , null , null ]
	let 게임판 = document.querySelector('.게임판')
	
	let html = ``;
	for( let i = 1 ; i<=9 ;i++ ){
		html += `<div class="버튼" onclick="클릭이벤트(${i})"> </div>`
	}
	게임판.innerHTML = html;
}




/*
	- 버튼목록현황 승리판단 3가지
		[ 0 ]	[ 1 ] 	[ 2 ] 1. 가로로 이겼을때 	: 0 1 2  / 3 4 5  / 6 7 8 
		[ 3 ]	[ 4 ]	[ 5 ] 2. 세로로 이겼을때 	: 0 3 6  / 1 4 7  / 2 5 8
		[ 6 ]	[ 7 ]	[ 8 ] 3. 대각선으로 이겼을때 : 0 4 8  / 2 4 6
		
	- 무승부 : 알이 모두 존재 했을떄 = null 0개이면 -> 빈자리가 없다.
*/














