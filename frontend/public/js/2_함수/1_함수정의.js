/*
	함수 [ 함 : 상자   /  수 : 숫자 ]
			- 상자 안에 들어있는 수/코드
			- 누군가 가 미리 상자에 넣어둔 수/코드
			- 미리 정의[만들어진]된 수/코드 !!!!!! 
				- 요리{ 레시피 }
					- 라면 스프{ 소금 , 고춧가루 , 간장분말 }
					- 양념장{ }
				
		1. function = 함수 / 행동 / 이벤트 내용물
		2. 하나의 특별한 목적의 작업을 수행하기 위한 독립적인 *코드의 집합*
		3. 사용 목적 
			1. 재활용성/재사용 : 한번 정의[만들기] 하면 반복적으로 사용 가능 / 중복 코드 묶음처리 = 클린코딩 
			
			2. 인수[매개변수]/반환[리턴] : 인수에 따른 서로 다른 반환값 얻을수 있다.
				- 인수[매개변수] : 함수 안으로 들어가는 수/코드	[*생략가능]
				- 반환[리턴] : 함수 밖으로 나오는 수/코드		[*생략가능]
					ex)
						더하기함수{x+y}		[1. 함수 정의 ]
						더하기함수( 3 , 5)		[2. 함수에 인수전달]
						함수반환 = 8			[3. 함수 실행 결과 ]
					
						인수/매개변수/INPUT
					----	--------------------
					|							|
					|							|
					|		function			|
					|							|
					--------------------	-----
										반환/리턴/OUTPUT
					->
						자판기
							인수 : 돈 , 음료수번호
							  정의{ 입력받은 돈이하의 음료수 번호에 따른 데이터 검사 }
							반환 : 선택된 음료수 [ *돈 과 선택에 따른 서로다른 음료수 ]
							
			
			3. 메모리 효율성 높일수 있다.
				- 함수 { } 안에서 '{' 시작 되고 '}' 끝나면 메모리/코드 다 사라짐/초기화
				- 지역변수 : { } 안에서 선언된 메모리는 { } 밖으로 못나감
				- 전역변수 : { } 없는곳에서 선언된 메모리는 모든 곳에서 호출 가능 
					* 메모리 : 변수/상수/배열/객체 등등 
					* 메모리 증가 -> 속도 감소 -> 개발비(돈) 증가

 */