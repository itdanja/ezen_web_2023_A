JS 메모리/저장 사용방법
	1. 변수/상수 : 데이터 1개 저장
		let 변수명 = 데이터1

	2. 배열 : 데이터 여러개 저장 
		let 배열명 = [ 데이터1 , 데이터2 , 데이터3 ]
		- 선언시 [ ] 
		- 호출시 배열명[인덱스번호]
		- 식별 : 인덱스 = 데이터 저장하는 순서번호 
		- 단점 : 서로 다른 데이터유형들을 한 배열에 저장하면 관리 힘듬 
			
	3. 객체 : 데이터 여러개 저장 
		let 객체명 = { 속성명 : 데이터1 , 속성명 : 데이터2 , 속성명 : 데이터3 , 속성명 : [ 데이터4,데이터5 ] } 
		- 선언시 { }
		- 호출시 객체명.속성명
		- 식별 : 속성명 = 저장된 데이터의 상태이름
		- 단점 : 동일한 구조의 객체 다수일때 배열과 같이 사용 

	4. 배열과 객체 관계/구조 
		1.   [   { }  ,  {  }  ,   {  }  ]
		2.  { 속성명 : [  ]  , 속성명 : [  ]  }

------------------------------------------------------------------------

과제4
	메모리 설계
	1. 저장
		누가 작성했는지 = 작성자											let writer 
		무엇 작성했는지 = 제목 , 내용 									let title , let content
		게시판 작성자 식별방법 = 비밀번호  [ 작성자 동명이인 있을수 있기 떄문에 ] 	let password
		* 언제작성되고 몇명이 조회했는지 = 작성일 / 조회수 					let date , let view
	
	2. 무엇 입력 요구 할껀지 
		작성자 , 제목 , 내용 , 비밀번호 
	
	3. 기능 상태 데이터 저장 
		1. 작성일=등록기능이 실행된 시간상태 저장 
		2. 조회수=해당 게시물 조회 기능 실행된 상태 저장 
	
	4. 데이터 구조 구성 = JS
		변수 , 배열 , 객체 
		1. 여러개 데이터 저장하기 위해 ( 배열 vs 객체 )
			[ '유재석' , '제목1' , '내용' , '1234' , '2023-06-29' , 0 ]
			{ 작성자 : '유재석' , 제목 : '제목1' , 내용 : '내용' , 비밀번호 : '1234' , 작성일 : '2023-06-29' , 조회수 :  0 }
			
		2. 게시물1개 = 객체  => 게시물(객체)여러개 저장 공간 => 배열 저장 
			let boardlist = [ ] 
			let board = { } 
			
	기능 설계 
		1. 글등록 기능 = 함수/행동		= onWrite()		: Create	C
		2. 글 전체 출력 기능 = 함수/행동	= onPrint()		: Reading	R
		3. 글 개별 출력 기능 = 함수/행동	= onView()		: Reading	R
			-수정										: Update	U
		4. 글 삭제 기능 = 함수/행동 		= onDelete()	: Delete	D
	
----------------------------------------------------------------------------------------------------------

--------------- 작업 순서 

1. onWrite()
	1. 등록 에 필요한 데이터 입력받은 html 구성 [ 작성자 , 비밀번호 , 제목, 내용 ]
	2. 입력받은 데이터를 등록했을때 이벤트 구성 
		1. 언제 이벤트 실행???? -> 버튼 클릭했을떄 ---> 버튼 필요 -> 버튼 만들기
			<button onclick="onWrite()">글쓰기</button>
		2. 이벤트 상세 정보 --> 함수 정의 --->
			function onWrite(){}
	3. 함수 정의
		1. 사용자에게 입력받은 데이터( input value ) 호출
			document.querySelector(식별자).value
		2. 게시물1개당 = 객체1개 선언/만들기  = 각 input로 입력받은 값들을 각 속성명별로 대입해서 객체 생성 
			{ }
			* 조회수 / 작성일 = 입력받은 값이 아닌 기능상태 저장 
			- 등록할때 조회수는 0 으로 시작 = 0
			- js 등록할때 날짜가 자동으로 등록 = new Date()
			
		3. // 3. 현재 { } 안에서 선언된 board 는 } 끝나면 사라짐[지역변수] --> 전역변수/배열에 저장하자.
			push

2. onPrint()
	1. 출력 필요한 HTML 구성 [ 테이블 ] 
	2. 출력 이벤트 구성 
		1. 언제 이벤트 실행 ??? 1.입장했을때(JS열렸을때만 / 2.등록할때마다 3.삭제될때마다 4.수정될때마다 5.조회수증가할때마다 )
		 	- 다시 출력해주는 이유 => 변화가 있으니까 화면 업데이트/새로고침 => 렌더링
	 	2. 함수 상세 정의
	 		function onPrint(){}
	3. 출력 
		저장 : 객체 생성 { } -> 배열 저장 [ ] 
		출력 : 배열 호출 [ ] -> 객체 호출  .
	
		1. 반복문을 이용한 배열내 하나씩 객체 호출 
			for( let i = 0 ; i<boardlist.length ; i++ ){
				let board = boardlist[i];
			}
		
		2. 객체내 정보를 HTML형식으로 구성 
		
	
	 
	

























	
	

	
	
	
	
	
	
	
		
		